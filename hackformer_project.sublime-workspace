{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"get",
				"getSaveStartPtr"
			],
			[
				"barC",
				"barCircleTex"
			],
			[
				"valueb",
				"valueBackgroundPenetration"
			],
			[
				"valueB",
				"valueBackgroundPenetration"
			],
			[
				"gett",
				"getTextPadding"
			],
			[
				"nu",
				"numChildren"
			],
			[
				"valueS",
				"valueSize"
			],
			[
				"as",
				"aspectRatio"
			],
			[
				"pushT",
				"pushTexture"
			],
			[
				"field",
				"fieldSize"
			],
			[
				"getTot",
				"getTotalFieldHeight"
			],
			[
				"paus",
				"pauseMenuBackground"
			],
			[
				"getColl",
				"GetCollisionTimeResult"
			],
			[
				"ne",
				"negativeCameraP"
			],
			[
				"child",
				"childYOffs"
			],
			[
				"removeF",
				"removeFieldsIfSet"
			],
			[
				"twea",
				"tweakCost"
			],
			[
				"pene",
				"ignoreAllPenetratingEntities"
			],
			[
				"on",
				"onScreenRight"
			],
			[
				"EntityType_p",
				"EntityType_pickupField"
			],
			[
				"triang",
				"triangleSize"
			],
			[
				"ignore",
				"ignoreAllPenetratingEntities"
			],
			[
				"fragmentS",
				"fragmentShaderSourceFileName"
			],
			[
				"vertexS",
				"vertexShaderSourceFileName"
			],
			[
				"getAnim",
				"getAnimationDuration"
			],
			[
				"getRend",
				"getRenderablePointLight"
			],
			[
				"light",
				"lightDistanceSquared"
			],
			[
				"un",
				"uniformNamePtr"
			],
			[
				"pixe",
				"pixelsPerMeter"
			],
			[
				"getA",
				"getAnimationDuration"
			],
			[
				"hitbox",
				"hitboxFreeList"
			],
			[
				"paritio",
				"partitionXOffs"
			],
			[
				"partitionC",
				"partitionCenterX"
			],
			[
				"solid",
				"solidGridSquareSize"
			],
			[
				"solidG",
				"solidGridSquareSize"
			],
			[
				"grou",
				"groundReferenceList"
			],
			[
				"colliderH",
				"colliderHitboxList"
			],
			[
				"gr",
				"groundReferenceList"
			],
			[
				"keybo",
				"keyboardFieldChildren"
			],
			[
				"newP",
				"newParentFieldIndex"
			],
			[
				"En",
				"EntityFlag_shootsAtTarget"
			],
			[
				"px",
				"pixelsPerMeter"
			],
			[
				"should",
				"shouldChangeDirection"
			],
			[
				"hor",
				"horizontalCollision"
			],
			[
				"EntityF",
				"EntityFlag_consoleSelected"
			],
			[
				"EntityFlag_C",
				"EntityFlag_consoleSelected"
			],
			[
				"ConsoleF",
				"ConsoleField_Float"
			],
			[
				"ME",
				"PIXELS_PER_METER"
			],
			[
				"drwa",
				"drawFilledRectangle"
			],
			[
				"E",
				"EntityFlag_facesLeft"
			],
			[
				"getR",
				"getRectHeight"
			],
			[
				"up",
				"upJustPressed"
			],
			[
				"leftMouseB",
				"leftMouseButtonJustPressed"
			],
			[
				"ho",
				"horizontalCollision"
			],
			[
				"max",
				"maxCollisionTime"
			],
			[
				"xM",
				"xMoveAcceleration"
			],
			[
				"x",
				"xMoveAcceleration"
			],
			[
				"ENTI",
				"EntityFlag"
			],
			[
				"SDL_R",
				"SDL_Renderer"
			],
			[
				"coll",
				"collisionTime"
			],
			[
				"col",
				"collisionTime"
			],
			[
				"colli",
				"collisionTime"
			],
			[
				"min",
				"minkowskiSum"
			],
			[
				"add",
				"addRadiusTo"
			],
			[
				"Entity",
				"EntityType_Player"
			],
			[
				"entiti",
				"entityIndex"
			],
			[
				"entity",
				"entityIndex"
			],
			[
				"num",
				"numEntities"
			],
			[
				"src",
				"srcRect"
			],
			[
				"tile",
				"tileRows"
			],
			[
				"push",
				"pushIntoArena_"
			],
			[
				"til",
				"tileWidth"
			],
			[
				"at",
				"atlasWidth"
			],
			[
				"atl",
				"atlasHeight"
			],
			[
				"load",
				"loadDelmittedStringIntoBuffer"
			],
			[
				"atlas",
				"atlasFileName"
			],
			[
				"center",
				"centerToPoint"
			],
			[
				"getD",
				"getDiamondRotation"
			],
			[
				"cen",
				"centerToMid"
			],
			[
				"draw",
				"drawDiamond"
			],
			[
				"sand",
				"sandbags"
			],
			[
				"SA",
				"SANDBAG"
			],
			[
				"MAX",
				"MAX_SANDBAGS"
			],
			[
				"ENTITY",
				"EntityType"
			],
			[
				"MAX_",
				"MAX_SANDBAGS"
			],
			[
				"san",
				"sandbags"
			],
			[
				"sandbag",
				"sandbagWidth"
			],
			[
				"PI",
				"PIXELS_PER_METER"
			],
			[
				"br",
				"br"
			],
			[
				"TA",
				"TANK_SIZE_METERS"
			],
			[
				"T",
				"TILE_SIZE_METERS"
			],
			[
				"WIND",
				"WINDOW_HEIGHT"
			],
			[
				"WIN",
				"WINDOW_WIDTH"
			],
			[
				"TANK",
				"TANK_SIZE_METERS"
			],
			[
				"turre",
				"turretAngle"
			],
			[
				"leng",
				"lengthSq"
			],
			[
				"create",
				"createBullet"
			],
			[
				"dstRect",
				"dstRectOffsetX"
			],
			[
				"turret",
				"turretTexHeight"
			],
			[
				"P",
				"PIXELS_PER_METER"
			],
			[
				"TANK_S",
				"TANK_SIZE_METERS"
			],
			[
				"Til",
				"TILE_SIZE_PIXELS"
			],
			[
				"TILE",
				"TILE_SIZE_PIXELS"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/C/Users/Vik/workspace/c++former/code/hackformer.cpp",
			"settings":
			{
				"buffer_size": 38983,
				"line_ending": "Windows"
			}
		},
		{
			"file": "code/hackformer_renderer.cpp",
			"settings":
			{
				"buffer_size": 49539,
				"line_ending": "Windows"
			}
		},
		{
			"file": "code/hackformer_entity.cpp",
			"settings":
			{
				"buffer_size": 96317,
				"line_ending": "Windows"
			}
		},
		{
			"file": "code/hackformer_renderer.h",
			"settings":
			{
				"buffer_size": 4057,
				"line_ending": "Windows"
			}
		},
		{
			"file": "code/hackformer.h",
			"settings":
			{
				"buffer_size": 5741,
				"line_ending": "Windows"
			}
		},
		{
			"file": "code/hackformer_entity.h",
			"settings":
			{
				"buffer_size": 3087,
				"line_ending": "Windows"
			}
		},
		{
			"file": "code/hackformer_editor.h",
			"settings":
			{
				"buffer_size": 361,
				"line_ending": "Windows",
				"name": "#include \"hackformer_types.h\""
			}
		},
		{
			"file": "code/hackformer_consoleField.h",
			"settings":
			{
				"buffer_size": 3169,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#include \"hackformer_editor.h\"\n\n#include \"hackformer_renderer.cpp\"\n\nvoid moveCamera(Input* input, Camera* camera) {\n	V2 movement = {};\n\n	if(input->up.pressed) movement.y++;\n	if(input->down.pressed) movement.y--;\n	if(input->right.pressed) movement.x++;\n	if(input->left.pressed) movement.x--;\n	\n	if(movement.x || movement.y) {\n		double movementSpeed = 0.5;\n		V2 delta = normalize(movement) * movementSpeed;\n\n		camera->p += delta; \n	}\n}\n\ns32 loadTileAtlas(RenderGroup* group, TextureData* textureData, s32* textureDataCount) {\n	char* tileFileNames[] = {\n		\"basic_1\",\n		\"basic_2\",\n		\"basic_3\",\n		\"delay\",\n		\"disappear\",\n		\"heavy\",\n	};\n\n	TextureData* tileAtlas = textureData + *textureDataCount;\n\n	for(s32 tileIndex = 0; tileIndex < arrayCount(tileFileNames); tileIndex++) {\n		char* fileName = tileFileNames[tileIndex];\n		TextureData* data = tileAtlas + tileIndex;\n\n		char fileNameWithPrefix[150];\n		sprintf(fileNameWithPrefix, \"tiles/%s\", fileName);\n\n		*data = loadPNGTexture(group, fileNameWithPrefix, false, false);\n	}\n\n	*textureDataCount += arrayCount(tileFileNames);\n\n	return arrayCount(tileFileNames);\n}\n\nbool clickedInside(Input* input, R2 rect) {\n	bool result = false;\n\n	if(input->leftMouse.justPressed) {\n		if(pointInsideRect(rect, input->mouseInMeters)) {\n			result = true;\n		}\n	}\n\n	return result;\n}\n\nint main(int argc, char* argv[]) {\n	s32 panelWidth = 250;\n	s32 windowWidth = 1280 + panelWidth, windowHeight = 720;\n	SDL_Window* window = createWindow(windowWidth, windowHeight);\n\n	Input input = {};\n	initInputKeyCodes(&input);\n\n	MemoryArena arena = createArena(1024 * 1024 * 128, true);\n\n	Camera camera = {};\n\n	TextureData* textureData = pushArray(&arena, TextureData, TEXTURE_DATA_COUNT);\n	s32 textureDataCount = 1;\n\n	RenderGroup* renderGroup  = createRenderGroup(32 * 1024, &arena, TEMP_PIXELS_PER_METER, windowWidth, windowHeight, \n													&camera, textureData, &textureDataCount);\n	renderGroup->enabled = true;\n\n	bool running = true;\n\n	const s32 mapWidthInTiles = 60;\n	const s32 mapHeightInTiles = 12;\n\n	TextureData* tileAtlas = textureData + textureDataCount;\n	s32 tileAtlasCount = loadTileAtlas(renderGroup, textureData, &textureDataCount);\n\n	Entity* entities = pushArray(&arena, Entity, 5000);\n	s32 entityCount = 0;\n\n	Color lineColor = createColor(100, 100, 100, 255);\n	double lineThickness = 0.01;\n	double dashSize = 0.1;\n	double spaceSize = 0.05;\n\n	V2 tileSize = v2(1, 1.1) * TILE_SIZE_IN_METERS;\n	V2 gridSize = v2(1, 1) * TILE_SIZE_IN_METERS;\n\n	double metersPerPixel = 1.0 / renderGroup->pixelsPerMeter;\n	V2 gameWindowSize = metersPerPixel * v2(windowWidth - panelWidth, windowHeight);\n	V2 panelWindowMax = metersPerPixel * v2(windowWidth, windowHeight);\n	R2 gameBounds = r2(v2(0, 0), gameWindowSize);\n	R2 panelBounds = r2(v2(gameBounds.max.x, 0), panelWindowMax);\n\n	s32 selectedTileIndex = -1;\n\n	s32 tiles[mapHeightInTiles][mapWidthInTiles];\n\n	for(s32 tileY = 0; tileY < mapHeightInTiles; tileY++) {\n		for(s32 tileX = 0; tileX < mapWidthInTiles; tileX++) {\n			tiles[tileY][tileX] = -1;\n		}\n	}\n\n	CursorMode cursorMode = CursorMode_stampTile;\n\n	#define ENTITY(type, width, height, fileName) {EntityType_##type, DrawOrder_##type, v2(width, height), fileName},\n	EntitySpec entitySpecs[] {\n		ENTITY(player, 1.75, 1.75, \"player/stand2\")\n		ENTITY(virus, 1.6, 1.6, \"virus1/stand\")\n		ENTITY(flyingVirus, 0.75, 0.75, \"virus2/full\")\n		ENTITY(laserBase, 0.9, 0.65, \"virus3/base_off\")\n		ENTITY(blueEnergy, 0.7, 0.7, \"blue_energy\")\n		ENTITY(endPortal, 1, 2, \"end_portal\")\n	};\n	#undef ENTITY\n\n	TextureData* entityTextureAtlas = textureData + textureDataCount;\n	for(s32 specIndex = 0; specIndex < arrayCount(entitySpecs); specIndex++) {\n		EntitySpec* spec = entitySpecs + specIndex;\n		char* fileName = spec->fileName;\n		textureData[textureDataCount++] = loadPNGTexture(renderGroup, fileName, false, false);\n	}\n\n	s32 selectedEntitySpecIndex = 0;\n	Entity* movingEntity = NULL;\n\n\n	while(running) {\n		pollInput(&input, &running, windowHeight, TEMP_PIXELS_PER_METER, camera.p);\n\n		if(input.esc.justPressed) {\n			cursorMode = CursorMode_moveEntity;\n		}\n\n		//NOTE: Draw the game\n		pushClipRect(renderGroup, gameBounds);\n		pushFilledRect(renderGroup, renderGroup->windowBounds, createColor(150, 150, 150, 255));\n\n		for(s32 rowIndex = 0; rowIndex <= mapHeightInTiles; rowIndex++) {\n			V2 lineStart = v2(0, gridSize.y * rowIndex);\n			V2 lineEnd = v2(mapWidthInTiles * gridSize.x, lineStart.y);\n			pushDashedLine(renderGroup, lineColor, lineStart, lineEnd, lineThickness, dashSize, spaceSize, true);\n		}\n\n		for(s32 colIndex = 0; colIndex <= mapWidthInTiles; colIndex++) {\n			V2 lineStart = v2(gridSize.x * colIndex, 0);\n			V2 lineEnd = v2(lineStart.x, mapHeightInTiles * gridSize.y);\n			pushDashedLine(renderGroup, lineColor, lineStart, lineEnd, lineThickness, dashSize, spaceSize, true);\n		}\n\n		for(s32 tileY = 0; tileY < mapHeightInTiles; tileY++) {\n			for(s32 tileX = 0; tileX < mapWidthInTiles; tileX++) {\n				s32 tileIndex = tiles[tileY][tileX];\n\n				if(tileIndex >= 0) {\n					TextureData* tex = tileAtlas + tileIndex;\n					V2 tileMin = hadamard(v2(tileX, tileY), gridSize);\n					R2 tileBounds = r2(tileMin, tileMin + tileSize);\n					pushTexture(renderGroup, tex, tileBounds, false, DrawOrder_gui, true);\n				}\n			}\n		}\n\n		for(s32 entityIndex = 0; entityIndex < entityCount; entityIndex++) {\n			Entity* entity = entities + entityIndex;\n\n			if(pointInsideRect(entity->bounds, input.mouseInMeters)) {\n\n			}\n\n			pushTexture(renderGroup, entity->tex, entity->bounds, false, entity->drawOrder, true);\n		}\n\n		//NOTE: Draw the panel\n		pushClipRect(renderGroup, panelBounds);\n		pushFilledRect(renderGroup, renderGroup->windowBounds, createColor(255, 255, 255, 255));\n\n		if(clickedInside(&input, panelBounds)) {\n			selectedTileIndex = -1;\n			cursorMode = CursorMode_moveEntity;\n		}\n\n		double maxTileY = 0;\n\n		for(s32 tileIndex = 0; tileIndex < tileAtlasCount; tileIndex++) {\n			V2 tileSpacing = v2(0.1, 0.1);\n\n			V2 tileMin = tileSpacing + panelBounds.min + hadamard(tileSpacing + tileSize, v2(tileIndex % 3, tileIndex / 3));\n			R2 tileBounds = r2(tileMin, tileMin + tileSize);\n			maxTileY = tileBounds.max.y;\n\n			if(clickedInside(&input, tileBounds)) {\n				selectedTileIndex = tileIndex;\n				cursorMode = CursorMode_stampTile;\n			}\n\n			TextureData* tex = tileAtlas + tileIndex;\n\n			pushTexture(renderGroup, tex, tileBounds, false, DrawOrder_gui);\n		}\n\n		s32 numEntitiesPerRow = 2;\n		for(s32 specIndexIter = 0; specIndexIter < arrayCount(entitySpecs); specIndexIter += numEntitiesPerRow) {\n			double minX = panelBounds.min.x;\n			double maxY = 0;\n\n			for(s32 specOffset = 0; specOffset < numEntitiesPerRow; specOffset++) {\n				s32 specIndex = specIndexIter + specOffset;\n\n				if(specIndex > arrayCount(entitySpecs)) break;\n\n				EntitySpec* spec = entitySpecs + specIndex;\n				V2 specSpacing = v2(0.1, 0.1);\n\n				V2 specMin = v2(minX, maxTileY);\n\n				R2 specBounds = r2(specMin, specMin + spec->size);\n				minX = specBounds.max.x;\n				maxY = max(maxY, specBounds.max.y);\n\n				if(clickedInside(&input, specBounds)) {\n					selectedEntitySpecIndex = specIndex;\n					cursorMode = CursorMode_stampEntity;\n				}\n\n				TextureData* tex = entityTextureAtlas + specIndex;\n\n				pushTexture(renderGroup, tex, specBounds, false, DrawOrder_gui);\n			}\n\n			maxTileY = maxY;\n		}\n\n\n		//NOTE: Draw things which can cross between the game and panel\n		pushDefaultClipRect(renderGroup);\n\n		bool mouseInGame = pointInsideRect(gameBounds, input.mouseInMeters);\n\n		if(cursorMode == CursorMode_stampTile) {\n			if(selectedTileIndex >= 0) {\n				R2 tileBounds = rectCenterDiameter(input.mouseInMeters, tileSize);\n\n				if(input.leftMouse.pressed && mouseInGame) {\n					s32 tileX = (s32)(input.mouseInWorld.x / gridSize.x);\n					s32 tileY = (s32)(input.mouseInWorld.y / gridSize.y);\n\n					if(tileX >= 0 && tileY >= 0 && tileX < mapWidthInTiles && tileY < mapHeightInTiles) {\n						tiles[tileY][tileX] = selectedTileIndex;\n					}\n				}\n\n\n				TextureData* tex = tileAtlas + selectedTileIndex;\n				pushTexture(renderGroup, tex, tileBounds, false, DrawOrder_gui);\n			}\n		}\n		else if(cursorMode == CursorMode_stampEntity) {\n			if(selectedEntitySpecIndex >= 0) {\n				EntitySpec* spec = entitySpecs + selectedEntitySpecIndex;\n				TextureData* tex = entityTextureAtlas + selectedEntitySpecIndex;\n\n				R2 entityBounds = rectCenterDiameter(input.mouseInMeters, spec->size);\n\n				if(input.leftMouse.justPressed && mouseInGame) {\n					Entity* entity = entities + entityCount++;\n					entity->type = spec->type;\n					entity->drawOrder = spec->drawOrder;\n					entity->bounds = rectCenterDiameter(input.mouseInWorld, spec->size);;\n					entity->tex = tex;\n				}\n				\n				pushTexture(renderGroup, tex, entityBounds, false, DrawOrder_gui);\n			}\n		}\n\n		Entity* clickedEntity = NULL;\n		s32 clickedEntityIndex = -1;\n\n		for(s32 entityIndex = 0; entityIndex < entityCount; entityIndex++) {\n			Entity* entity = entities + entityIndex;\n\n			if(pointInsideRect(entity->bounds, input.mouseInWorld)) {\n				clickedEntity = entity;\n				clickedEntityIndex = entityIndex;\n				break;\n			}\n		}\n\n		if(input.rightMouse.pressed) {\n			if(clickedEntity) {\n				entities[clickedEntityIndex] = entities[entityCount-- - 1];\n				clickedEntity = NULL;\n				clickedEntityIndex = -1;\n			} else {\n				s32 tileX = (s32)(input.mouseInMeters.x / gridSize.x);\n				s32 tileY = (s32)(input.mouseInMeters.y / gridSize.y);\n\n				if(tileX >= 0 && tileY >= 0 && tileX < mapWidthInTiles && tileY < mapHeightInTiles) {\n					tiles[tileY][tileX] = -1;\n				}\n			}\n		}\n\n		bool maintainMovingEntity = false;\n		if(input.leftMouse.pressed) {\n			if(cursorMode == CursorMode_moveEntity) {\n				if(input.leftMouse.justPressed) {\n					movingEntity = clickedEntity;\n				}\n\n				if(movingEntity) {\n					movingEntity->bounds = reCenterRect(movingEntity->bounds, input.mouseInWorld);\n					maintainMovingEntity = true;\n				}\n			}\n		}\n		if(!maintainMovingEntity) {\n			movingEntity = NULL;\n		}\n\n		if(input.x.justPressed) {\n			char* saveFileName = \"edit_save.txt\";\n			FILE* file = fopen(saveFileName, \"r\");\n			assert(file);\n\n			writeS32(file, mapWidthInTiles);\n			writeS32(file, mapHeightInTiles);\n\n			for(s32 tileY = 0; tileY < mapHeightInTiles; tileY++) {\n				for(s32 tileX = 0; tileX < mapWidthInTiles; tileX++) {\n					writeS32(file, tiles[tileY][tileX]);\n				}\n			}\n\n			writeS32(file, entityCount);\n\n			for(s32 entityIndex = 0; entityIndex < entityCount; entityIndex++) {\n				Entity* entity = entities + entityCount;\n				writeS32(file, entity->type);\n				writeV2(file, getRectCenter(entity->bounds));\n			}\n\n			fclose(file);\n		}\n\n		glClear(GL_COLOR_BUFFER_BIT);\n		drawRenderGroup(renderGroup, NULL);\n		\n		moveCamera(&input, &camera);\n\n		SDL_GL_SwapWindow(window);\n	}\n\n	return 0;\n}",
			"file": "code/hackformer_editor.cpp",
			"file_size": 10986,
			"file_write_time": 130793947793294677,
			"settings":
			{
				"buffer_size": 10656,
				"line_ending": "Windows"
			}
		},
		{
			"file": "code/hackformer_save.cpp",
			"settings":
			{
				"buffer_size": 29251,
				"line_ending": "Windows"
			}
		},
		{
			"file": "code/hackformer_consoleField.cpp",
			"settings":
			{
				"buffer_size": 33616,
				"line_ending": "Windows"
			}
		},
		{
			"file": "code/hackformer_types.h",
			"settings":
			{
				"buffer_size": 8909,
				"line_ending": "Windows"
			}
		},
		{
			"file": "code/hackformer_math.h",
			"settings":
			{
				"buffer_size": 8998,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/User/test build 1.sublime-build",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 127.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ena",
				"Package Control: Enable Package"
			],
			[
				"Package Control: list",
				"Package Control: List Packages"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"Package Control: insta",
				"Package Control: Install Package"
			]
		],
		"width": 416.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/W/c++former/code",
		"/W/c++former/shaders"
	],
	"file_history":
	[
		"/W/c++former/code/hackformer_consoleField.h",
		"/W/c++former/code/hackformer_types.h",
		"/W/c++former/code/hackformer_entity.h",
		"/C/Users/Vik/workspace/c++former/code/hackformer_consoleField.cpp",
		"/W/c++former/code/hackformer_entity.cpp",
		"/W/c++former/code/hackformer_save.cpp",
		"/C/Users/Vik/AppData/Roaming/Sublime Text 3/Packages/User/hackformer_build.sublime-build",
		"/C/Users/Vik/AppData/Roaming/Sublime Text 3/Packages/User/hackformer_editor_build.sublime-build",
		"/W/c++former/code/hackformer_renderer.h",
		"/W/c++former/code/hackformer_math.h",
		"/W/c++former/code/hackformer.h",
		"/C/Users/Vik/AppData/Local/Temp/Temp1_handmade_hero_day_132_source.zip/code/handmade.h",
		"/C/Users/Vik/workspace/c++former/code/hackformer_save.cpp",
		"/W/c++former/shaders/stencil.frag",
		"/W/c++former/shaders/basic.frag",
		"/C/Users/Vik/workspace/c++former/code/hackformer.cpp",
		"/C/Users/Vik/Desktop/hackformer alpha 4.02/shaders/forward.frag",
		"/W/c++former/code/hackformer_consoleField.cpp",
		"/W/c++former/code/hackformer.cpp",
		"/W/c++former/shaders/forward.vert",
		"/W/c++former/shaders/forward.frag",
		"/W/c++former/shaders/basic.vert",
		"/C/Users/Vik/workspace/c++former/code/hackformer_save.h",
		"/C/Users/Vik/workspace/c++former/code/hackformer_entity.cpp",
		"/C/Users/Vik/workspace/c++former/code/hackformer_renderer.cpp",
		"/W/c++former/code/hackformer_renderer.cpp",
		"/C/Users/Vik/workspace/android-stotra-apps/android-stotra-apps/settings.gradle",
		"/C/Users/Vik/workspace/android-stotra-apps/android-stotra-apps/build.gradle",
		"/W/android-stotra-apps/android-stotra-apps/UILibrary/build.gradle",
		"/W/android-stotra-apps/android-stotra-apps/settings.gradle",
		"/W/android-stotra-apps/android-stotra-apps/BhajanPlayer/build.gradle",
		"/W/android-stotra-apps/android-stotra-apps/build.gradle",
		"/W/android-stotra-apps/android-stotra-apps/local.properties",
		"/W/android-stotra-apps/android-stotra-apps/UILibrary/local.properties",
		"/W/android-stotra-apps/android-stotra-apps/Guru-Gita/build.gradle",
		"/W/android-stotra-apps/android-stotra-apps/Bhagavad-Gita/build.gradle",
		"/W/android-stotra-apps/android-stotra-apps/Vishnu-Sahasranamam/build.gradle",
		"/W/android-stotra-apps/android-stotra-apps/Shatashloki-Ramayana/build.gradle",
		"/W/android-stotra-apps/android-stotra-apps/Lalita-Sahasranamam/build.gradle",
		"/W/android-stotra-apps/android-stotra-apps/Kavacha-Manjari/build.gradle",
		"/W/android-stotra-apps/android-stotra-apps/Hanuman-Chalisa-Telugu/build.gradle",
		"/W/android-stotra-apps/android-stotra-apps/Hanuman-Chalisa-Tamil/build.gradle",
		"/W/android-stotra-apps/android-stotra-apps/Hanuman-Chalisa-Kannada/build.gradle",
		"/W/android-stotra-apps/android-stotra-apps/Hanuman-Chalisa/build.gradle",
		"/W/android-stotra-apps/android-stotra-apps/Hanuman-Chalisa-Hindi/build.gradle",
		"/W/android-stotra-apps/android-stotra-apps/Vishnu-Sahasranamam/settings.gradle",
		"/W/android-stotra-apps/local.properties",
		"/W/android-stotra-apps/android-stotra-apps/Bhagavad-Gita/project.properties",
		"/W/android-stotra-apps/settings.gradle",
		"/W/android-stotra-apps/android-stotra-apps/Bhagavad-Gita/local.properties",
		"/C/Users/Vik/Downloads/sources/Wav_File.jai",
		"/C/Users/Vik/Downloads/sources/demo.jai",
		"/C/Users/Vik/Downloads/sources/Build.jai",
		"/C/Users/Vik/Downloads/sources/Basic.jai",
		"/C/Users/Vik/Downloads/sources/Print.jai",
		"/C/Users/Vik/Downloads/sources/Mixer_Win32.jai",
		"/C/Users/Vik/Downloads/sources/Preload.jai",
		"/C/Users/Vik/Downloads/sources/stb_image.jai",
		"/C/Users/Vik/Downloads/sources/File.jai",
		"/C/Users/Vik/Downloads/sources/GL.jai",
		"/C/Users/Vik/Downloads/sources/Thread.jai",
		"/C/Users/Vik/Downloads/sources/Mixer.jai",
		"/C/Users/Vik/Downloads/sources/Math.jai",
		"/C/Users/Vik/Downloads/sources/Pool.jai",
		"/C/Users/Vik/AppData/Local/Temp/Temp1_iaca-win64.zip/iaca-win64/iacaMarks.h",
		"/C/Users/Vik/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/Vik/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Users/Vik/Downloads/handmade_hero_038_source/handmade_hero_day_038_source/code/handmade_platform.h",
		"/C/Users/Vik/Downloads/handmade_hero_108_source/handmade_hero_day_108_source/code/handmade_render_group.cpp",
		"/C/Users/Vik/Downloads/handmade_hero_108_source/handmade_hero_day_108_source/code/handmade.cpp",
		"/C/Users/Vik/Downloads/handmade_hero_108_source/handmade_hero_day_108_source/code/win32_handmade.cpp",
		"/W/c++former/release/shaders/basic.frag",
		"/W/Dunjun/data/shaders/default.frag",
		"/C/Users/Vik/Downloads/pixel_exact/pixel_exact/glsl/simple.vert",
		"/C/Users/Vik/Downloads/pixel_exact/pixel_exact/glsl/simple.frag",
		"/W/Dunjun/code/Dunjun.cpp",
		"/C/Users/Vik/AppData/Local/Temp/Temp1_handmade_hero_day_093_source.zip/code/handmade_render_group.h",
		"/C/Users/Vik/AppData/Local/Temp/Temp1_handmade_hero_day_093_source.zip/code/handmade_render_group.cpp",
		"/W/c++former/shaders/basic.frag.txt",
		"/W/c++former/build/include/SOIL.h",
		"/W/c++former/code/hackformer_consolefield.h",
		"/C/Users/Vik/AppData/Local/Temp/Temp2_handmade_hero_day_075_source.zip/code/handmade_platform.h",
		"/C/Users/Vik/AppData/Local/Temp/Temp2_handmade_hero_day_075_source.zip/code/handmade.h",
		"/C/Users/Vik/AppData/Local/Temp/Temp2_handmade_hero_day_075_source.zip/code/handmade.cpp",
		"/W/c++former/code/hackformer_math.cpp",
		"/W/td/code/td_math.cpp",
		"/W/td/code/td_renderer.h",
		"/W/td/code/td_main.cpp",
		"/W/td/code/td_renderer.cpp",
		"/W/td/code/td_main.h",
		"/C/Users/Vik/AppData/Local/Temp/Temp2_handmade_hero_day_075_source.zip/code/handmade_math.h",
		"/W/td/code/td_math.h",
		"/C/Users/Vik/AppData/Roaming/Sublime Text 3/Packages/User/td_build.sublime-build",
		"/W/td/code/hackformer.h",
		"/W/td/code/hackformer.cpp",
		"/C/Users/Vik/AppData/Local/Temp/Temp1_handmade_hero_day_075_source.zip/code/handmade_sim_region.cpp",
		"/C/Users/Vik/AppData/Local/Temp/Temp1_handmade_hero_day_075_source.zip/code/handmade_entity.h",
		"/C/Users/Vik/AppData/Local/Temp/Temp1_handmade_hero_day_075_source.zip/code/handmade_entity.cpp",
		"/C/Users/Vik/AppData/Local/Temp/Temp1_handmade_hero_day_075_source.zip/code/handmade.cpp",
		"/W/c++former/build/include/SDL_ttf.h",
		"/W/c++former/build/include/begin_code.h",
		"/C/Users/Vik/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/Vik/Downloads/handmade_hero_038_source/handmade_hero_day_038_source/code/handmade.h",
		"/C/Users/Vik/Downloads/handmade_hero_038_source/handmade_hero_day_038_source/code/handmade.cpp",
		"/C/Users/Vik/AppData/Roaming/Sublime Text 3/Packages/HighlightBuildErrors/HighlightBuildErrors.sublime-settings",
		"/C/Users/Vik/AppData/Roaming/Sublime Text 3/Packages/User/SublimeLinter.sublime-settings",
		"/C/Users/Vik/AppData/Roaming/Sublime Text 3/Packages/User/test build 1.sublime-build",
		"/W/c++former/hackformer.cpp",
		"/W/c++former/hackformer_math.cpp",
		"/W/c++former/main.cpp",
		"/W/rewind_shooter/main.cpp",
		"/C/Users/Vik/AppData/Local/Temp/Temp1_handmade_hero_day_060_source.zip/code/handmade.cpp",
		"/C/Users/Vik/AppData/Local/Temp/Temp1_handmade_hero_day_060_source.zip/code/handmade.h",
		"/C/Users/Vik/AppData/Local/Temp/Temp1_handmade_hero_day_060_source.zip/code/handmade_intrinsics.h",
		"/C/Users/Vik/AppData/Local/Temp/Temp1_handmade_hero_day_060_source.zip/code/handmade_math.h",
		"/C/Users/Vik/AppData/Local/Temp/Temp1_handmade_hero_day_060_source.zip/code/linux_handmade.cpp",
		"/C/Users/Vik/AppData/Local/Temp/Temp1_handmade_hero_day_060_source.zip/code/handmade_random.h",
		"/C/Users/Vik/AppData/Local/Temp/Temp1_handmade_hero_day_052_source.zip/code/handmade.cpp",
		"/W/rewind_shooter/build/include/SDL.h",
		"/W/FacebookHackerCup2015/NewYearsResolution/main.cpp",
		"/C/Users/Vik/Downloads/handmade_hero_038_source/handmade_hero_day_038_source/code/win32_handmade.cpp",
		"/C/Users/Vik/Downloads/01_hello_SDL/01_hello_SDL/01_hello_SDL.cpp",
		"/C/Users/Vik/Desktop/test.c",
		"/C/Users/Vik/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"saveHeaderToArena",
			"selectedTileIndex = -1",
			"tileSize",
			"running",
			"while(",
			"camera = ",
			"gameState",
			"loadPNGTexture(gameState",
			"getSaveFilePath",
			"(bool32",
			"createArena",
			"updateAndDrawButton",
			"clearRenderElemClipRect",
			"setRenderHeaderType",
			"sortPtrs",
			"group->drawingQuads",
			"glUseP",
			"bindShader",
			"glEnd",
			"glBegin",
			"animCounter += dtForFrame",
			"acceptButtonC",
			"acceptB",
			"moveTo",
			"centerCam",
			"animCounter",
			"input->pause",
			"pause",
			"paused",
			"case B",
			"drawConsoleT",
			"drawConsoleTriangle",
			"isTileT",
			"drawConsoleT",
			"EntityType_tile",
			"drawValueA",
			"clickHandled = false",
			"cancelB",
			"cancel",
			"blueE",
			"blueEn",
			"createA",
			"gravityTex",
			"dock->",
			"updateAnd",
			"gameSTate->renderGroup",
			"dock",
			"loadPNGT",
			"stand2",
			"res/",
			"dock/do",
			"drawFilledStencil",
			"createShader",
			"readChar",
			"tileAtlas",
			"dataIndex",
			"loadedData.",
			"chunk",
			"readMessages",
			"keycode",
			"data->fileN",
			";\n",
			"writeString",
			";\n",
			"writeConsoleField",
			"currentAnim",
			"gameState",
			"hasClipRect",
			"centerCameraAround",
			"gameState->input.",
			"ConsoleField_cameraFollows",
			"ConsoleFIeld_shoots",
			"dt > 0",
			"ConsoleField_cameraF",
			"drawEnt",
			"anim",
			"field->childYOffs",
			"drawOutlinedConsoleBox",
			"loadPNG",
			"\\",
			");\n",
			"swapFIeldP =",
			"paused",
			"_W",
			"get_wav_header",
			"struct",
			"serialize_simple",
			"use_preexisting_code",
			"removeFromP",
			"#if 0",
			"ConsoleFIeld_followsW",
			"drawDashedLine",
			"x",
			"followsW",
			"follows",
			"startPos",
			"moveTowardsW",
			"movementField",
			"ConsoleField_seeks",
			"newIndex",
			"mouse",
			"drawConsoleT",
			"addField",
			"right",
			"consoleFont",
			"tweakCost",
			"int",
			"moveField(",
			"moveField",
			"#if 0",
			"entity->p.y =",
			"entity->p.x =",
			"entity->p =",
			"chunkSize",
			"ConsoleField_moves",
			"#if 0",
			">= 2",
			">= ",
			">= 2",
			"getTota",
			"calcFieldPositions",
			"moveToE",
			"addField",
			"getBot",
			"		\n",
			"fieldSkip",
			"refNode(",
			"entity->numFields"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"loadPNGTexture(gameState->renderGroup",
			"renderGroup",
			"",
			"dataToCopy->",
			"input->",
			"/",
			"y",
			"gameState->fieldSpec.",
			"result",
			"s32",
			"s32 ",
			"input->",
			"result.shader.program",
			"tile",
			"result->",
			"double",
			"entity",
			"setFlags",
			"texture->",
			"animTime",
			"uint",
			"result",
			"uint32",
			"arrayCount",
			"tileX"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Users/Vik/workspace/c++former/code/hackformer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38983,
						"regions":
						{
						},
						"selection":
						[
							[
								25544,
								25544
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 9542.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "code/hackformer_renderer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49539,
						"regions":
						{
						},
						"selection":
						[
							[
								13616,
								13636
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6038.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "code/hackformer_entity.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 96317,
						"regions":
						{
						},
						"selection":
						[
							[
								24164,
								24164
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 11153.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "code/hackformer_renderer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4057,
						"regions":
						{
						},
						"selection":
						[
							[
								3783,
								3783
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 34.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "code/hackformer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5741,
						"regions":
						{
						},
						"selection":
						[
							[
								4588,
								4588
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1938.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "code/hackformer_entity.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3087,
						"regions":
						{
						},
						"selection":
						[
							[
								1407,
								1407
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 854.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "code/hackformer_editor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 361,
						"regions":
						{
						},
						"selection":
						[
							[
								358,
								358
							]
						],
						"settings":
						{
							"auto_name": "#include \"hackformer_types.h\"",
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "code/hackformer_consoleField.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3169,
						"regions":
						{
						},
						"selection":
						[
							[
								3167,
								3167
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1416.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 8,
					"file": "code/hackformer_editor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10656,
						"regions":
						{
						},
						"selection":
						[
							[
								10504,
								10504
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 4358.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "code/hackformer_save.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29251,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "code/hackformer_consoleField.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33616,
						"regions":
						{
						},
						"selection":
						[
							[
								20999,
								20999
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 9870.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "code/hackformer_types.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8909,
						"regions":
						{
						},
						"selection":
						[
							[
								7126,
								7126
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3754.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "code/hackformer_math.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8998,
						"regions":
						{
						},
						"selection":
						[
							[
								8874,
								8886
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6904.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.513665547741,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 260.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/hackformer_editor_build.sublime-build",
	"project": "hackformer_project.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"W:\\Dunjun\\Dunjun_workspace.sublime-workspace"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"square",
				"square"
			],
			[
				"canF",
				"canFieldBeMoved"
			],
			[
				"dst",
				"dstSq"
			],
			[
				"main",
				"main"
			],
			[
				"pintI",
				"pointInsideRect"
			],
			[
				"pushT",
				"pushTexture"
			],
			[
				"move",
				"moveRaw"
			],
			[
				"moveRaw",
				"moveRaw"
			],
			[
				"addBa",
				"addBackground"
			]
		],
		"width": 392.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 150.0,
	"status_bar_visible": false,
	"template_settings":
	{
	}
}
